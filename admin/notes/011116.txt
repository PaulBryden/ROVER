Notes from ROVER meeting 1 Nov 16


ADMIN

Labs for soldering etc. are available Wednesday and Thursday 9am-12.30pm: JW127

November interim review will take form of team presentations, with individual contributions from *everyone*. (~4 minute each on your contribution to the project.) Presentations are 29 Nov 16. 22 Nov Mark is away, so use the time to prepare slides etc.

Mark hopeful that everyone will be able to get access to CIS Gitlab.

Open source release of all code. Discuss possible licences - GPL v2 or 3, or MIT? Mark recommends GPL v2.

Think about industry partnerships - possibility of donations (cash/hardware/software) / collaborations?

Send orders for any required components to Mark ASAP with all details, ideally including purchase URLs. Reimbursements on e.g. Amazon orders are possible, but only do this if parts are required at very short notice as it involves extra paperwork.


SOFTWARE

[Before meeting we met up and discussed getting rid of function calls in messages, and just send variables instead. In ROS, a topic allows publishing of a single data type. We can adopt a similar concept for our services (with possible additional features later). So, each message (after message header) will be a black box with a variable content. User should be able to select from a group of pre-defined data types (such as doulbe, int, vector, later maybe random variables), or define new data types specifically for the node. At this point we assume that any node requesting this information will know the data type returned in advance. This significantly simplifies message spec and parsing, as well as probably node programming, but does mean we need messages to call a number of standard functions that apply to all services (probably start, stop, subscribe, unsubscribe, request value once, status).]

Progress review

Message passing: We've created an Arduino library with with readMessage/sendMessage functions and placeholder typedefs.
Message specification: Formal specification is nearly complete, with some details tbc with Mark. Now working on implementing typedefs/message constructors.
Resource discovery: Have gathered requirements and worked out an algorithm, ready to start coding. Require a special message type with integer (distance) and string (name) in body for advertising.

Goal for 15 Nov (to be completed in time for demoing at interim review at the latest):
Build a communication system capable of resource discovery and communication from any node to any other node, capable of sending generic messages, and demonstrate using a network of Arduino Megas passing strings (which for demo purposes can be printed to laptop screens).

Mark recommended paralellising as much as possible, so get people working on GUI/process control/function calls on nodes even before comms are finished if possible. Functional programming makes this possible, as comms will just slot in later.

Therefore: New team for exploring node functions. We need a volunteer each from MS and MPQ to team up and start looking into this - details tbc.

IMPORTANT: Discuss stuff with Electronics - closer collaboration probably necessary on the following points:
	* Network design - make sure network layout is suitable for comms
	* Avoid possible conflicts with node programming (sensor team) - they should avoid using interrupts on Arduinos for now
	* Hardware requirements - number of nodes (in particular number of Raspberry Pis) depends on level of automation, which has not yet been determined.

We really require a calling diagram to demonstrate the relation between functions of the different subteams, and show which functions are going to be public and available to the end user.

Meeting with Mark and sub-team leaders at 10am Wednesday 2 Nov to sort out remaining message spec questions and try and get an overview/create a draft calling diagram. Anyone on software team welcome to come, but not compulsory as we will relay relevant information to sub-teams.


ELECTRONICS

Power and sensor sub-teams are making progress. Problem with motor controllers - required torque is higher than can probably be supplied. Discussing compromise with Mech. Increase motors to 24V?

Using Razor IMU (cf. last year), which is basically an Arduino with 1 serial port. Otherwise using a Raspberry Pi for image processing (possibly up to 3 Pis in total later), and Megas for sensors and motor controllers.

